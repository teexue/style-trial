---
alwaysApply: true
---

# Next.js React 开发规则

您是 JavaScript、React、Node.js、Next.js App Router、Zustand、Shadcn UI、Radix UI、Tailwind 和 Stylus 方面的专家。

## 代码风格和结构

- 编写简洁、技术性的 JavaScript 代码，遵循 Standard.js 规则。
- 使用函数式和声明式编程模式；避免使用类。
- 优先使用迭代和模块化，避免代码重复。
- 使用带有辅助动词的描述性变量名（例如：isLoading、hasError）。
- 文件结构：导出的组件、子组件、辅助函数、静态内容。

Standard.js 规则

- 使用 2 个空格缩进。
- 字符串使用单引号，除非需要避免转义。
- 不使用分号（除非需要消除语句歧义）。
- 不使用未使用的变量。
- 关键字后添加空格。
- 函数声明的括号前添加空格。
- 始终使用 === 而不是 ==。
- 中缀运算符必须有空格。
- 逗号后应有空格。
- else 语句与花括号保持在同一行。
- 多行 if 语句使用花括号。
- 始终处理 err 函数参数。
- 变量和函数使用驼峰命名法。
- 构造函数和 React 组件使用 PascalCase。

命名约定

- 目录使用小写字母和短横线（例如：components/auth-wizard）。
- 组件优先使用命名导出。

React 最佳实践

- 使用函数式组件并配合 prop-types 进行类型检查。
- 组件定义使用 "function" 关键字。
- 正确实现 hooks（useState、useEffect、useContext、useReducer、useMemo、useCallback）。
- 遵循 Hooks 规则（只在顶层调用 hooks，只在 React 函数中调用 hooks）。
- 创建自定义 hooks 来提取可重用的组件逻辑。
- 适当时使用 React.memo() 进行组件记忆化。
- 为作为 props 传递的函数实现 useCallback。
- 对于昂贵的计算使用 useMemo。
- 避免在渲染中使用内联函数定义，以防止不必要的重新渲染。
- 优先使用组合而非继承。
- 使用 children prop 和 render props 模式创建灵活、可重用的组件。
- 实现 React.lazy() 和 Suspense 进行代码分割。
- 谨慎使用 refs，主要用于 DOM 访问。
- 优先使用受控组件而非非受控组件。
- 实现错误边界来优雅地捕获和处理错误。
- 在 useEffect 中使用清理函数防止内存泄漏。
- 使用短路求值和三元运算符进行条件渲染。

状态管理

- 使用 Zustand 进行全局状态管理。
- 需要时提升状态以在组件间共享状态。
- 当 prop 传递变得繁琐时，使用 context 进行中间状态共享。

UI 和样式

- 使用 Shadcn UI 和 Radix UI 作为组件基础。
- 使用 Tailwind CSS 实现响应式设计；采用移动优先的方法。
- 使用 Stylus 作为 CSS 模块进行组件特定样式：
  - 为需要自定义样式的每个组件创建 .module.styl 文件。
  - 在 Stylus 文件中使用驼峰命名法命名类。
  - 利用 Stylus 的嵌套、变量和混合功能实现高效样式。
- 在 Stylus 模块中实现一致的 CSS 类命名约定（例如：BEM）。
- 使用 Tailwind 进行实用类和快速原型。
- 结合 Tailwind 实用类和 Stylus 模块的混合方法：
  - 使用 Tailwind 进行常见实用功能和布局。
  - 使用 Stylus 模块进行复杂的组件特定样式。
  - 永远不要使用 @apply 指令

样式文件结构

- 将 Stylus 模块文件放在对应的组件文件旁边。
- 示例结构：
  components/
  Button/
  Button.js
  Button.module.styl
  Card/
  Card.js
  Card.module.styl

Stylus 最佳实践

- 对颜色、字体和其他重复值使用变量。
- 为常用样式模式创建混合。
- 利用 Stylus 的父选择器（&）进行嵌套和伪类。
- 通过避免深度嵌套保持低特异性。

与 React 集成

- 在 React 组件中导入 Stylus 模块：
  import styles from './ComponentName.module.styl'
- 使用样式对象应用类：
  `<div className={styles.containerClass}>`

性能优化

- 最小化 'use client'、'useEffect' 和 'useState'；优先使用 React 服务器组件（RSC）。
- 用 Suspense 包装客户端组件并提供 fallback。
- 对非关键组件使用动态加载。
- 优化图片：使用 WebP 格式，包含尺寸数据，实现懒加载。
- 在 Next.js 中实现基于路由的代码分割。
- 最小化全局样式的使用；优先使用模块化、作用域样式。
- 在生产环境中使用 PurgeCSS 与 Tailwind 移除未使用的样式。

表单和验证

- 对表单输入使用受控组件。
- 实现表单验证（客户端和服务器端）。
- 对于复杂表单考虑使用 react-hook-form 等库。
- 使用 Zod 或 Joi 进行模式验证。

错误处理和验证

- 优先处理错误处理和边缘情况。
- 在函数开始处处理错误和边缘情况。
- 对错误条件使用早期返回，避免深度嵌套的 if 语句。
- 将快乐路径放在函数最后以提高可读性。
- 避免不必要的 else 语句；使用 if-return 模式。
- 使用守卫子句早期处理前置条件和无效状态。
- 实现适当的错误日志记录和用户友好的错误消息。
- 在服务器操作中将预期错误建模为返回值。

无障碍性（a11y）

- 使用语义化 HTML 元素。
- 实现适当的 ARIA 属性。
- 确保键盘导航支持。

测试

- 使用 Jest 和 React Testing Library 为组件编写单元测试。
- 为关键用户流程实现集成测试。
- 谨慎使用快照测试。

安全性

- 清理用户输入以防止 XSS 攻击。
- 谨慎使用 dangerouslySetInnerHTML，仅用于已清理的内容。

国际化（i18n）

- 使用 react-intl 或 next-i18next 等库进行国际化。

关键约定

- 使用 'nuqs' 进行 URL 搜索参数状态管理。
- 优化 Web Vitals（LCP、CLS、FID）。
- 限制 'use client' 的使用：
  - 优先使用服务器组件和 Next.js SSR。
  - 仅在小组件中用于 Web API 访问。
  - 避免用于数据获取或状态管理。
- 平衡 Tailwind 实用类和 Stylus 模块的使用：
  - 使用 Tailwind 进行快速开发和一致的间距/尺寸。
  - 使用 Stylus 模块进行复杂、独特的组件样式。

遵循 Next.js 文档进行数据获取、渲染和路由。
